<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tethys.Win.NET5</name>
    </assembly>
    <members>
        <member name="T:Tethys.App.TethysAppConfig">
            <summary>
            This class stores the application configuration. At the beginning
            of the application all the properties are read from either the
            registry or an XML fileName. At the end of the application the data
            is stored again.
            </summary>
        </member>
        <member name="M:Tethys.App.TethysAppConfig.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.App.TethysAppConfig"/> class.
            </summary>
            <param name="applicationAssembly">The application assembly.</param>
        </member>
        <member name="M:Tethys.App.TethysAppConfig.WriteData(Tethys.App.TethysXmlTextWriter)">
            <summary>
            Core function to write the application data.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
        </member>
        <member name="M:Tethys.App.TethysAppConfig.ReadData(Tethys.App.TethysXmlTextReader)">
            <summary>
            Core function to read the application data.
            </summary>
            <param name="xmlReader">The XML reader.</param>
        </member>
        <member name="M:Tethys.App.TethysAppConfig.Write(System.String)">
            <summary>
            This function writes the (user dependent) application configuration
            to a XML fileName that is located in the path for the application data
            of a roaming user, i.e. something like:
            Base Path\CompanyName\ProductName\filename.
            </summary>
            <param name="fileName">Name of the XML fileName to be used.</param>
            <returns>
            The function returns true if all configuration data has
            been successfully written; otherwise false will be returned.
            </returns>
            <remarks>
            The function does not throw ANY exceptions. All exceptions will be
            caught inside of WriteXml().
            </remarks>
        </member>
        <member name="M:Tethys.App.TethysAppConfig.Read(System.String)">
            <summary>
            This function reads the (user dependent) application configuration
            from a XML fileName that is located in the path for the application data
            of a roaming user, i.e. something like:
              Base Path\CompanyName\ProductName\filename.
            </summary>
            <remarks>
            This is the SAX-like version.
            The function does not throw ANY exceptions. All exceptions will be
            caught inside of ReadXml().
            </remarks>
            <param name="fileName">Name of the XML fileName to be used.</param>
            <returns>The function returns true if all configuration data has
            been successfully read; otherwise false will be returned.
            </returns>
        </member>
        <member name="T:Tethys.App.TethysAppConfig2">
            <summary>
            This class stores the application configuration. At the beginning
            of the application all the properties are read from either the
            registry or an XML fileName. At the end of the application the data
            is stored again.
            </summary>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.App.TethysAppConfig2"/> class.
            </summary>
            <param name="applicationAssembly">The application assembly.</param>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.ReadFromString(System.String)">
            <summary>
            Reads the application configuration from a string.
            </summary>
            <param name="fileContents">The file contents.</param>
            <returns>The function returns true if all configuration data has
            been successfully read; otherwise false will be returned.
            </returns>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.WriteToXDocument">
            <summary>
            Writes the configuration to an <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.WriteToFile(System.String)">
            <summary>
            This function writes the (user dependent) application configuration
            to an XML file that is located in the path for the application data
            of a roaming user, i.e. something like:
            Base Path\CompanyName\ProductName\filename.
            </summary>
            <param name="fileName">Name of the XML fileName to be used.</param>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.WriteToFile(System.IO.Stream)">
            <summary>
            This function writes the (user dependent) application configuration to
            the given file stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.ReadFromFile(System.String)">
            <summary>
            This function reads the (user dependent) application configuration
            from a XML file that is located in the path for the application data
            of a roaming user, i.e. something like:
              Base Path\CompanyName\ProductName\filename.
            </summary>
            <param name="fileName">Name of the XML fileName to be used.</param>
            <returns>The function returns true if all configuration data has
            been successfully read; otherwise false will be returned.
            </returns>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.ReadFromFile(System.IO.Stream,System.Text.Encoding)">
            <summary>
            This function reads the (user dependent) application configuration
            from a XML file using the given encoding.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>The function returns true if all configuration data has
            been successfully read; otherwise false will be returned.
            </returns>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.GetAttributeValue(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <param name="throwException">if set to <c>true</c> throws an exception
            if the node was not found.</param>
            <returns>The requested attribute value.</returns>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.GetFirstSubNode(System.Xml.Linq.XContainer,System.String,System.Boolean)">
            <summary>
            Gets the first sub node.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <param name="throwException">if set to <c>true</c> throws an exception
            if the node was not found.</param>
            <returns>The requested sub node.</returns>
        </member>
        <member name="M:Tethys.App.TethysAppConfig2.GetFirstSubNodeValue(System.Xml.Linq.XContainer,System.String,System.Boolean)">
            <summary>
            Gets the value of the first sub node with the given name.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <param name="throwException">if set to <c>true</c> throws an exception
            if the node was not found.</param>
            <returns>The requested sub node value as string.</returns>
        </member>
        <member name="T:Tethys.App.ConfigLocation">
            <summary>
            Locations to store the application configuration.
            </summary>
        </member>
        <member name="F:Tethys.App.ConfigLocation.UserData">
            <summary>
            User specific path, i.e. ...\Documents and Settings\user\ApplicationData\...
            </summary>
        </member>
        <member name="F:Tethys.App.ConfigLocation.AppData">
            <summary>
            Application specific path, i.e. ...\Documents and Settings\All Users\ApplicationData\...
            </summary>
        </member>
        <member name="F:Tethys.App.ConfigLocation.Executable">
            <summary>
            Executable dependent path (same folder as executable)
            </summary>
        </member>
        <member name="T:Tethys.App.TethysAppConfigBase">
            <summary>
            This class stores the application configuration. At the beginning
            of the application all the properties are read from either the
            registry or an XML fileName. At the end of the application the data
            is stored again.
            </summary>
        </member>
        <member name="P:Tethys.App.TethysAppConfigBase.Encoding">
            <summary>
            Gets or sets the encoding for read/write operations.
            </summary>
        </member>
        <member name="P:Tethys.App.TethysAppConfigBase.Location">
            <summary>
            Gets or sets the location of the application configuration.
            </summary>
        </member>
        <member name="P:Tethys.App.TethysAppConfigBase.ApplicationAssembly">
            <summary>
            Gets or sets the application assembly.
            </summary>
        </member>
        <member name="P:Tethys.App.TethysAppConfigBase.AssemblyCompany">
            <summary>
            Gets the assembly company.
            </summary>
        </member>
        <member name="M:Tethys.App.TethysAppConfigBase.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.App.TethysAppConfigBase"/> class.
            </summary>
            <param name="applicationAssembly">The application assembly.</param>
        </member>
        <member name="M:Tethys.App.TethysAppConfigBase.GetCompleteFilename(System.String)">
            <summary>
            Returns the complete path for the fileName to be stored.
            The following possibilities exist:<br />
            (a) The fileName is already a fully qualified path -&gt; no change<br />
            (b) Return executable dependent path (same folder as executable)<br />
            (c) Return user specific path, i.e. ...\Documents and Settings\user\ApplicationData\...<br />
            (d) Return application specific path, i.e. ...\Documents and Settings\All Users\ApplicationData\...
            </summary>
            <param name="fileName">(source) filename.</param>
            <returns>The complete filename.</returns>
        </member>
        <member name="T:Tethys.App.TethysXmlTextReader">
            <summary>
            An enhanced XmlTextReader.
            </summary>
        </member>
        <member name="P:Tethys.App.TethysXmlTextReader.UseXmlConvert">
            <summary>
            Gets or sets a value indicating whether to use XmlConvert for type
            conversions (otherwise the default conversion function are used).
            </summary>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.App.TethysXmlTextReader"/> class.
            </summary>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.App.TethysXmlTextReader"/> class.
            </summary>
            <param name="file">The fileName.</param>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.ReadString(System.String)">
            <summary>
            Returns the next node with the given name as string.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.ReadElementInteger(System.String)">
            <summary>
            Returns the next node with the given name as integer value.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.ReadElementDouble(System.String)">
            <summary>
            Returns the next node with the given name as double value.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.ReadElementBool(System.String)">
            <summary>
            Returns the next node with the given name as boolean value.
            </summary>
            <param name="value">The value.</param>
            <returns>The boolean value.</returns>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.SearchNodeName(System.String)">
            <summary>
            Helper function: searches for the next node with the
            the specified node name.
            </summary>
            <param name="nodeName">Expected name of the node.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified node is not found.
            </exception>
        </member>
        <member name="M:Tethys.App.TethysXmlTextReader.GetNextNode(System.String)">
            <summary>
            Helper function: returns the value for the specified text node
            or throws an exception if the node is not found.
            </summary>
            <param name="nodeName">Name of the node to be read.</param>
            <returns>The value for the specified text node.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified node is not found.
            </exception>
        </member>
        <member name="T:Tethys.App.TethysXmlTextWriter">
            <summary>
            An enhanced XmlTextWriter.
            </summary>
        </member>
        <member name="F:Tethys.App.TethysXmlTextWriter.writer">
            <summary>
            Internal XML writer object.
            </summary>
        </member>
        <member name="F:Tethys.App.TethysXmlTextWriter.useXmlConvert">
            <summary>
            Internal property: use XmlConvert for type conversions (otherwise
            the default conversion function are used).
            </summary>
        </member>
        <member name="P:Tethys.App.TethysXmlTextWriter.XmlWriter">
            <summary>
            Gets the internal XML writer object.
            </summary>
        </member>
        <member name="P:Tethys.App.TethysXmlTextWriter.UseXmlConvert">
            <summary>
            Gets or sets a value indicating whether to use XmlConvert for type
            conversions (otherwise the default conversion function are used).
            </summary>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.App.TethysXmlTextWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.App.TethysXmlTextWriter"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.WriteElementString(System.String,System.String)">
            <summary>
            When overridden in a derived class, writes an element with the
            specified local name and value.
            </summary>
            <param name="localName">Name of the local.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.WriteElementInteger(System.String,System.Int32)">
            <summary>
            Writes the specified integer value a XML node.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.WriteElementDouble(System.String,System.Double)">
            <summary>
            Writes the specified double value a XML node.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.WriteElementBool(System.String,System.Boolean)">
            <summary>
            Writes the specified boolean value a XML node.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Tethys.App.TethysXmlTextWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Tethys.Cryptography.CRC16">
            <summary>
            The class CRC16 implements a fast CRC-16 checksum algorithm,
            that uses the following polynomial:<br/>
            <code>
            x**16 + x**15 + x**2 + 1 ( = 0x8005)
            </code>
            Default initial value = 0x0000,<br/>
            default final XOR value = 0x0000.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.HashSizeBitsCrc16">
            <summary>
            Hash size in bits.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.HashSizeBytesCrc16">
            <summary>
            Hash size in bytes.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.DefaultInit">
            <summary>
            Default initial value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.DefaultXor">
            <summary>
            Default final XOR value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.Tab16">
            <summary>
            Constants used to compute the CRC-16 checksum.
            (Table for CCITT polynomial.)
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.initValue">
            <summary>
            Initial value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.xorValue">
            <summary>
            Final XOR value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC16.crc">
            <summary>
            16 bit CRC value.
            </summary>
        </member>
        <member name="P:Tethys.Cryptography.CRC16.InitValue">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:Tethys.Cryptography.CRC16.XorValue">
            <summary>
            Gets or sets the final XOR value.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.CRC16.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.Cryptography.CRC16"/> class.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.CRC16.Initialize">
            <summary>
            Initializes an implementation of HashAlgorithm.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.CRC16.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash
            algorithm for computing the hash.<br/>
            This function calculates the CRC-16-checksum via the specified partial block.
            The CRC-16 value of the previous calculation is updated the specified block.<br/>
            </summary>
            <param name="buffer">The input for which to compute the hash code. </param>
            <param name="offset">The offset into the byte array from which to begin using data. </param>
            <param name="count">The number of bytes in the byte array to use as data.</param>
            <remarks>
            Before the CRC-16 for a complete sequence is calculated, the CRC value must
            be set to 0. After calculation the complete sequence, the result is stored
            in the little-endian form (low byte/high byte) after the sequence. To check
            the complete sequence including this value, the same values are used and the
            final result must be 0, otherwise one or more bits in the complete sequence
            is wrong.
            It uses following generator polynomial:
            x**16 + x**15 + x**2 + x + 1.
            </remarks>
        </member>
        <member name="M:Tethys.Cryptography.CRC16.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed
            by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Tethys.Cryptography.CRC32">
            <summary>
            The class CRC32 implements a fast CRC-32 checksum algorithm,
            that uses the following polynomial:<br/>
            <code>
            x**32 + x**26 + x**23 + x**22 + x**16 + x**12 + x**11 +
            x**10 + x**8  + x**7  + x**5  + x**4  + x**2  + x     + 1
            ( = 0x04C11DB7)
            </code>
            This algorithm is also used in <c>Winzip</c>.<br/>
            Default initial value = 0xffffffff,<br/>
            default final XOR value = 0xffffffff.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.HashSizeBitsCrc32">
            <summary>
            Hash size in bits.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.HashSizeBytesCrc32">
            <summary>
            Hash size in bytes.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.DefaultInit">
            <summary>
            Default initial value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.DefaultXor">
            <summary>
            Default final XOR value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.PreCalcTab">
            <summary>
            Constants used to compute the CRC-32 checksum.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.initValue">
            <summary>
            Initial value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.xorValue">
            <summary>
            Final XOR value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.CRC32.crc">
            <summary>
            32 bit CRC value.
            </summary>
        </member>
        <member name="P:Tethys.Cryptography.CRC32.InitValue">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:Tethys.Cryptography.CRC32.XorValue">
            <summary>
            Gets or sets the final XOR value.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.CRC32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.Cryptography.CRC32"/> class.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.CRC32.Initialize">
            <summary>
            Initializes this implementation of HashAlgorithm.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash
            algorithm for computing the hash.
            </summary>
            <param name="buffer">The input for which to compute the hash code. </param>
            <param name="offset">The offset into the byte array from which to begin using data. </param>
            <param name="count">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Tethys.Cryptography.CRC32.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed
            by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Tethys.Cryptography.XCRC">
            <summary>
            The class XCRC implements a fast CRC-16 checksum algorithm,
            that uses the following polynomial:<br/>
            <code>
            Polynom = x**16 + x**15 + x**10 + x**8 + x**7
            + x**5 + x**3 + 1
            (= 0x85A5)
            </code>
            Default initial value = 0xA695,<br/>
            default final XOR value = 0xFFFF.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.HashSizeBitsXcrc">
            <summary>
            Hash size in bits.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.HashSizeBytesXcrc">
            <summary>
            Hash size in bytes.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.DefaultInit">
            <summary>
            Default initial value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.DefaultXor">
            <summary>
            Default final XOR value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.tab">
            <summary>
            Constants used to compute the CRC-16 checksum.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.initValue">
            <summary>
            Initial value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.xorValue">
            <summary>
            Final XOR value.
            </summary>
        </member>
        <member name="F:Tethys.Cryptography.XCRC.crc">
            <summary>
            16 bit CRC value.
            </summary>
        </member>
        <member name="P:Tethys.Cryptography.XCRC.InitValue">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:Tethys.Cryptography.XCRC.XorValue">
            <summary>
            Gets or sets the final XOR value.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.XCRC.BuildTable">
            <summary>
            Initializes the CRC table.
            </summary>
            <returns>The CRC table.</returns>
        </member>
        <member name="M:Tethys.Cryptography.XCRC.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.Cryptography.XCRC"/> class.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.XCRC.Initialize">
            <summary>
            Initializes an implementation of HashAlgorithm.
            </summary>
        </member>
        <member name="M:Tethys.Cryptography.XCRC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash
            algorithm for computing the hash.<br/>
            This function calculates the CRC-16-checksum via the specified partial block.
            The CRC-16 value of the previous calculation is updated the specified block.<br/>
            </summary>
            <param name="buffer">The input for which to compute the hash code. </param>
            <param name="offset">The offset into the byte array from which to begin using data. </param>
            <param name="count">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Tethys.Cryptography.XCRC.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed
            by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Tethys.EnumHelper">
            <summary>
            Helper methods for enumerations.
            </summary>
        </member>
        <member name="M:Tethys.EnumHelper.StringToEnum(System.Type,System.String)">
            <summary>
            Convert any possible string-value of a given enumeration
            to its internal representation.
            </summary>
            <param name="type">enumeration (type).</param>
            <param name="value">string value to be translated.</param>
            <returns>enumeration value.</returns>
        </member>
        <member name="M:Tethys.EnumHelper.GetEnumDescription(System.Enum)">
            <summary>
            Gets the enumeration description.
            </summary>
            <param name="value">The value.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Tethys.EnumHelper.GetEnumName(System.Type,System.String)">
            <summary>
            Gets the name of the enumeration.
            </summary>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
            <returns>An enumeration name.</returns>
        </member>
        <member name="T:Tethys.IO.CodePageEncoding">
            <summary>
            Represents an ASCII character encoding of Unicode characters.
            In difference to ASCIIEncoding this encoding class supports
            the special german characters like umlaute, etc.
            </summary>
        </member>
        <member name="F:Tethys.IO.CodePageEncoding.CodePageAsciiUs">
            <summary>
            IBM ASCII 0-255 byte conversion.
            </summary>
        </member>
        <member name="F:Tethys.IO.CodePageEncoding.CodePageAnsi">
            <summary>
            Windows ASCII 0-255 byte conversion.
            </summary>
        </member>
        <member name="F:Tethys.IO.CodePageEncoding.CodePageLatin1">
            <summary>
            MS-DOS Code page 850 (Multilingual Latin 1).
            </summary>
        </member>
        <member name="F:Tethys.IO.CodePageEncoding.CodePageLatin2">
            <summary>
            MS-DOS Code page 850 (Multilingual Latin 2).
            </summary>
        </member>
        <member name="F:Tethys.IO.CodePageEncoding.CodePageLatin3">
            <summary>
            MS-DOS Code page 850 (Multilingual Latin 3).
            </summary>
        </member>
        <member name="F:Tethys.IO.CodePageEncoding.CodePageDefault">
            <summary>
            Default code page.
            </summary>
        </member>
        <member name="F:Tethys.IO.CodePageEncoding.currentCodePage">
            <summary>
            Current code page.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.BodyName">
            <summary>
            Gets the name for this encoding that can be used with mail agent body tags.
            Not supported by CodePageEncoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.CodePage">
            <summary>
            Gets the code page identifier of this encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.EncodingName">
            <summary>
            Gets the human-readable description of the encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.HeaderName">
            <summary>
            Gets the name for this encoding that can be used with mail agent header tags.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.IsBrowserDisplay">
            <summary>
            Gets a value indicating whether this encoding can be used for display by browser clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.IsBrowserSave">
            <summary>
            Gets a value indicating whether this encoding can be used for saving by browser clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.IsMailNewsDisplay">
            <summary>
            Gets a value indicating whether this encoding can be used for display by mail and news clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.IsMailNewsSave">
            <summary>
            Gets a value indicating whether this encoding can be used for saving by mail and news clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.WebName">
            <summary>
            Gets the name registered with the Internet Assigned Numbers Authority (IANA) for this encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.CodePageEncoding.WindowsCodePage">
            <summary>
            Gets the Windows operating system code page that most closely corresponds to this encoding.
            </summary>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.IO.CodePageEncoding"/> class.
            </summary>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.IO.CodePageEncoding"/> class.
            </summary>
            <param name="codePage">The code page identifier of the preferred encoding.
            -or-
            0, to use the default encoding.</param>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a CodePageEncoding object
            and is equivalent to this CodePageEncoding object.
            </summary>
            <param name="obj">operand to be compared to the object.</param>
            <returns>The function returns true if the two operands are identical.</returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <remarks>
            This is only a DUMMY - we don't need this method here.
            </remarks>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetByteCount(System.String)">
            <summary>
            Calculates the number of bytes required to store the results of
            encoding the characters from a specified String.
            </summary>
            <param name="s">The string.</param>
            <returns>The byte count.</returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes required to store the results of
            encoding a set of characters from a specified Unicode character array.
            </summary>
            <param name="chars">The Unicode character array to encode.</param>
            <param name="index">The index of the first character in chars to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>The byte count.</returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a specified range of elements from a Unicode character array,
            and stores the results in a specified range of elements in a byte
            array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>
            The bytes.
            </returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a specified range of characters from a String and stores the
            results in a specified range of elements in a byte array.
            </summary>
            <param name="s">The string of characters to encode.</param>
            <param name="charIndex">The index of the first character in chars to
            encode.</param>
            <param name="charCount">The number of characters to encode. </param>
            <param name="bytes">The byte array where the encoded results are stored.</param>
            <param name="byteIndex">The index of the first element in bytes where
            the encoded results are stored.</param>
            <returns>The bytes.</returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetBytes(System.Char[])">
            <summary>
            Encodes a specified character array into a byte array.
            </summary>
            <param name="chars">The character array to encode. </param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetBytes(System.String)">
            <summary>
            Encodes a specified String into an array of bytes.
            </summary>
            <param name="s">The character string to encode. </param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetBytes(System.Char[],System.Int32,System.Int32)">
            <summary>
            Encodes a range of characters from a character array into a byte array.
            </summary>
            <param name="chars">The character array to encode. </param>
            <param name="index">The starting index of the character array to encode. </param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters that would result from decoding a
            specified range of elements in a byte array.
            </summary>
            <param name="bytes">The byte array to decode.</param>
            <param name="index">The index of the first byte in bytes to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
            The number of characters that would result from decoding the
            specified range of elements in bytes.
            </returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes a specified range of elements from a byte array, and stores the
            result into a specified range of elements in a Unicode character array.
            </summary>
            <param name="bytes">The byte array to decode. </param>
            <param name="byteIndex">The index of the first element in bytes to decode. </param>
            <param name="byteCount">The number of elements to decode. </param>
            <param name="chars">The character array where the decoded results are stored. </param>
            <param name="charIndex">The index of the first element in chars to store decoded results. </param>
            <returns>
            The number of characters stored in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes required to encode a
            specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>
            The maximum number of bytes required to encode charCount number of
            characters.
            </returns>
        </member>
        <member name="M:Tethys.IO.CodePageEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters that can result from
            decoding a specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode. </param>
            <returns>The maximum number of characters that can result from
            decoding byteCount number of bytes.</returns>
        </member>
        <member name="T:Tethys.IO.FileStringOptions">
            <summary>
            Specification for different filename parts.
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.Extend">
            <summary>
            Get fileName extend.
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.FileName">
            <summary>
            Get filename.
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.FilePath">
            <summary>
            Get fileName path.
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.Drive">
            <summary>
            Get drive.
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.Folder">
            <summary>
            Get folder.
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.PartMask">
            <summary>
            Part Mask
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.Wildcards">
            <summary>
            Use Wildcards
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.Default">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.OnlyName">
            <summary>
            Only Names
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.New">
            <summary>
            New value
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.TrueCase">
            <summary>
            True Case
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.Evaluate">
            <summary>
            Evaluate expression
            </summary>
        </member>
        <member name="F:Tethys.IO.FileStringOptions.Subdir">
            <summary>
            Sub directory.
            </summary>
        </member>
        <member name="T:Tethys.IO.FileString">
            <summary>
            The class FileString contains functions to manipulate filename
            strings.
            </summary>
        </member>
        <member name="F:Tethys.IO.FileString.fileName">
            <summary>
            Internal filename.
            </summary>
        </member>
        <member name="M:Tethys.IO.FileString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.IO.FileString"/> class.
            </summary>
        </member>
        <member name="M:Tethys.IO.FileString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.IO.FileString"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Tethys.IO.FileString.GetPart(Tethys.IO.FileStringOptions)">
            <summary>
            This function returns a part of the path string object as a zero
            terminated string up to end of the path name.
            Parameters
            flags  contains the specification from which the part is returned. This
            part begins at the first position which is specified by one of the
            following part specifications:
            Drive ... returns the complete path.
            FilePath  returns the directory, fileName name and extend.
            FileName  returns the fileName name and the extend.
            Extend .. returns the fileName extend.
            Folder .. returns the fileName folder.
            Comments
            File name separators may be specified with a backslash (\) or a slash (/).
            </summary>
            <param name="partOptions">The part options.</param>
            <returns>
            This function returns a string with the specified path.
            </returns>
        </member>
        <member name="M:Tethys.IO.FileString.GetPart(System.String,Tethys.IO.FileStringOptions)">
            <summary>
            This function returns a part of the path string object as a zero
            terminated string up to end of the path name.
            Parameters
            flags  contains the specification from which the part is returned. This
            part begins at the first position which is specified by one of the
            following part specifications:
            Drive ... returns the complete path.
            FilePath  returns the directory, fileName name and extend.
            FileName  returns the fileName name and the extend.
            Extend .. returns the fileName extend.
            Folder .. returns the fileName folder.
            Comments
            File name separators may be specified with a backslash (\) or a slash (/).
            </summary>
            <param name="file">The file.</param>
            <param name="fileStringOptions">The file string options.</param>
            <returns>
            This function returns a string with the specified path.
            </returns>
        </member>
        <member name="M:Tethys.IO.FileString.IsRealFile">
            <summary>
            This function checks whether this fileName really exists.
            </summary>
            <returns>
              <c>true</c> if [is real file]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tethys.IO.FileString.IsRealFile(System.String)">
            <summary>
            This function checks whether the specified fileName really exists.
            </summary>
            <param name="file">File to be checked.</param>
            <returns>
              <c>true</c> if [is real file] [the specified file]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tethys.IO.FileString.AbbreviateName(System.String,System.Int32,System.Boolean)">
            <summary>
            Abbreviates the given filename.
            </summary>
            <param name="name">The name.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="atLeastName">if set to <c>true</c> [at least name].</param>
            <returns>The abbreviated name.</returns>
            <code>
            lpszCanon = C:\MYAPP\DEBUGS\C\TESWIN.C
            cchMax   b   Result
            ------   -   ---------
            1- 7    F   (empty)
            1- 7    T   TESWIN.C
            8-14    x   TESWIN.C
            15-16    x   C:\...\TESWIN.C
            17-23    x   C:\...\C\TESWIN.C
            24-25    x   C:\...\DEBUGS\C\TESWIN.C
            26+      x   C:\MYAPP\DEBUGS\C\TESWIN.C.
            </code>
        </member>
        <member name="T:Tethys.IO.GermanEncoding">
            <summary>
            Represents an ASCII character encoding of Unicode characters.
            In difference to ASCIIEncoding this encoding class supports
            the special german characters like umlaute, etc.
            </summary>
        </member>
        <member name="F:Tethys.IO.GermanEncoding.GermanCodePage">
            <summary>
            Code page.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.BodyName">
            <summary>
            Gets the name for this encoding that can be used with mail agent body tags.
            Not supported by GermanEncoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.CodePage">
            <summary>
            Gets the code page identifier of this encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.EncodingName">
            <summary>
            Gets the human-readable description of the encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.HeaderName">
            <summary>
            Gets the name for this encoding that can be used with mail agent header tags.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.IsBrowserDisplay">
            <summary>
            Gets a value indicating whether this encoding can be used for display by browser clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.IsBrowserSave">
            <summary>
            Gets a value indicating whether this encoding can be used for saving by browser clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.IsMailNewsDisplay">
            <summary>
            Gets a value indicating whether this encoding can be used for display by mail and news clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.IsMailNewsSave">
            <summary>
            Gets a value indicating whether this encoding can be used for saving by mail and news clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.WebName">
            <summary>
            Gets the name registered with the Internet Assigned Numbers Authority (IANA) for this encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.GermanEncoding.WindowsCodePage">
            <summary>
            Gets the Windows operating system code page that most closely corresponds to this encoding.
            </summary>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a GermanEncoding object
            and is equivalent to this GermanEncoding object.
            </summary>
            <param name="obj">operand to be compared to the object.</param>
            <returns>The function returns true if the two operands are identical.</returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <remarks>
            This is only a DUMMY - we don't need this method here.
            </remarks>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetByteCount(System.String)">
            <summary>
            Calculates the number of bytes required to store the results of
            encoding the characters from a specified String.
            </summary>
            <param name="s">The string.</param>
            <returns>The byte count.</returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes required to store the results of
            encoding a set of characters from a specified Unicode character array.
            </summary>
            <param name="chars">The Unicode character array to encode.</param>
            <param name="index">The index of the first character in chars to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>The byte count.</returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a specified range of elements from a Unicode character array,
            and stores the results in a specified range of elements in a byte
            array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>
            The bytes.
            </returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a specified range of characters from a String and stores the
            results in a specified range of elements in a byte array.
            </summary>
            <param name="s">The string of characters to encode.</param>
            <param name="charIndex">The index of the first character in chars to
            encode.</param>
            <param name="charCount">The number of characters to encode. </param>
            <param name="bytes">The byte array where the encoded results are stored.</param>
            <param name="byteIndex">The index of the first element in bytes where
            the encoded results are stored.</param>
            <returns>The bytes.</returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetBytes(System.Char[])">
            <summary>
            Encodes a specified character array into a byte array.
            </summary>
            <param name="chars">The character array to encode. </param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetBytes(System.String)">
            <summary>
            Encodes a specified String into an array of bytes.
            </summary>
            <param name="s">The character string to encode. </param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetBytes(System.Char[],System.Int32,System.Int32)">
            <summary>
            Encodes a range of characters from a character array into a byte array.
            </summary>
            <param name="chars">The character array to encode. </param>
            <param name="index">The starting index of the character array to encode. </param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters that would result from decoding a
            specified range of elements in a byte array.
            </summary>
            <param name="bytes">The byte array to decode.</param>
            <param name="index">The index of the first byte in bytes to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
            The number of characters that would result from decoding the
            specified range of elements in bytes.
            </returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes a specified range of elements from a byte array, and stores the
            result into a specified range of elements in a Unicode character array.
            </summary>
            <param name="bytes">The byte array to decode. </param>
            <param name="byteIndex">The index of the first element in bytes to decode. </param>
            <param name="byteCount">The number of elements to decode. </param>
            <param name="chars">The character array where the decoded results are stored. </param>
            <param name="charIndex">The index of the first element in chars to store decoded results. </param>
            <returns>
            The number of characters stored in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes required to encode a
            specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>
            The maximum number of bytes required to encode charCount number of
            characters.
            </returns>
        </member>
        <member name="M:Tethys.IO.GermanEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters that can result from
            decoding a specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode. </param>
            <returns>The maximum number of characters that can result from
            decoding byteCount number of bytes.</returns>
        </member>
        <member name="T:Tethys.IO.SerialPortEncoding">
            <summary>
            Represents an ASCII character encoding of Unicode characters.
            In difference to ASCIIEncoding this encoding class supports the special
            characters handling that is needed for a proper XModem file transmission.
            </summary>
        </member>
        <member name="F:Tethys.IO.SerialPortEncoding.GermanCodePage">
            <summary>
            The code page.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.BodyName">
            <summary>
            Gets the name for this encoding that can be used with mail agent body tags.
            Not supported by SerialPortEncoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.CodePage">
            <summary>
            Gets the code page identifier of this encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.EncodingName">
            <summary>
            Gets the human-readable description of the encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.HeaderName">
            <summary>
            Gets the name for this encoding that can be used with mail agent header tags.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.IsBrowserDisplay">
            <summary>
            Gets a value indicating whether this encoding can be used for display by browser clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.IsBrowserSave">
            <summary>
            Gets a value indicating whether this encoding can be used for saving by browser clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.IsMailNewsDisplay">
            <summary>
            Gets a value indicating whether this encoding can be used for display by mail and news clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.IsMailNewsSave">
            <summary>
            Gets a value indicating whether this encoding can be used for saving by mail and news clients.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.WebName">
            <summary>
            Gets the name registered with the Internet Assigned Numbers Authority (IANA) for this encoding.
            </summary>
        </member>
        <member name="P:Tethys.IO.SerialPortEncoding.WindowsCodePage">
            <summary>
            Gets the Windows operating system code page that most closely corresponds to this encoding.
            </summary>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a SerialPortEncoding object
            and is equivalent to this SerialPortEncoding object.
            </summary>
            <param name="obj">operand to be compared to the object.</param>
            <returns>The function returns true if the two operands are identical.</returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <remarks>
            This is only a DUMMY - we don't need this method here.
            </remarks>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetByteCount(System.String)">
            <summary>
            Calculates the number of bytes required to store the results of
            encoding the characters from a specified String.
            </summary>
            <param name="s">The <see cref="T:System.String" /> containing the
            set of characters to encode.</param>
            <returns>
            The byte count.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes required to store the results of
            encoding a set of characters from a specified Unicode character array.
            </summary>
            <param name="chars">The Unicode character array to encode.</param>
            <param name="index">The index of the first character in chars to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>The byte count.</returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a specified range of elements from a Unicode character array,
            and stores the results in a specified range of elements in a byte
            array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>
            The actual number of bytes written into <paramref name="bytes" />.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a specified range of characters from a String and stores the
            results in a specified range of elements in a byte array.
            </summary>
            <param name="s">The string of characters to encode.</param>
            <param name="charIndex">The index of the first character in chars to
            encode.</param>
            <param name="charCount">The number of characters to encode. </param>
            <param name="bytes">The byte array where the encoded results are stored.</param>
            <param name="byteIndex">The index of the first element in bytes where
            the encoded results are stored.</param>
            <returns>The bytes.</returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetBytes(System.Char[])">
            <summary>
            Encodes a specified character array into a byte array.
            </summary>
            <param name="chars">The character array to encode. </param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetBytes(System.String)">
            <summary>
            Encodes a specified String into an array of bytes.
            </summary>
            <param name="s">The character string to encode. </param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetBytes(System.Char[],System.Int32,System.Int32)">
            <summary>
            Encodes a range of characters from a character array into a byte array.
            </summary>
            <param name="chars">The character array to encode. </param>
            <param name="index">The starting index of the character array to encode. </param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            A byte array containing the encoded representation of the
            specified range of characters in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters that would result from decoding a
            specified range of elements in a byte array.
            </summary>
            <param name="bytes">The byte array to decode.</param>
            <param name="index">The index of the first byte in bytes to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
            The number of characters that would result from decoding the
            specified range of elements in bytes.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes a specified range of elements from a byte array, and stores the
            result into a specified range of elements in a Unicode character array.
            </summary>
            <param name="bytes">The byte array to decode. </param>
            <param name="byteIndex">The index of the first element in bytes to decode. </param>
            <param name="byteCount">The number of elements to decode. </param>
            <param name="chars">The character array where the decoded results are stored. </param>
            <param name="charIndex">The index of the first element in chars to store decoded results. </param>
            <returns>
            The number of characters stored in chars.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes required to encode a
            specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>
            The maximum number of bytes required to encode charCount number of
            characters.
            </returns>
        </member>
        <member name="M:Tethys.IO.SerialPortEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters that can result from
            decoding a specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode. </param>
            <returns>The maximum number of characters that can result from
            decoding byteCount number of bytes.</returns>
        </member>
        <member name="T:Tethys.Net.CommonTcpPorts">
            <summary>
            Common TCP ports.
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Zero">
            <summary>
            Dummy (zero) port.
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Echo">
            <summary>
            echo port
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.FtpData">
            <summary>
            ftp data port
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Ftp">
            <summary>
            tcp ftp port
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Telnet">
            <summary>
            tcp telnet port
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Smtp">
            <summary>
            tcp simple mail transfer protocol
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Time">
            <summary>
            tcp time server
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Name">
            <summary>
            tcp name server
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Nameserver">
            <summary>
            tcp domain name server
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Finger">
            <summary>
            tcp finger port
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Http">
            <summary>
            tcp http port
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Pop">
            <summary>
            tcp post office protocol
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Pop2">
            <summary>
            tcp post office protocol
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Pop3">
            <summary>
            tcp post office protocol
            </summary>
        </member>
        <member name="F:Tethys.Net.CommonTcpPorts.Nntp">
            <summary>
            tcp network news transfer protocol
            </summary>
        </member>
        <member name="T:Tethys.Net.IcmpConstants">
            <summary>
            ICMP constants.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.EchoReply">
            <summary>
            Echo reply query.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.DestUnreachable">
            <summary>
            Destination unreachable.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.SourceQuench">
            <summary>
            Source quench.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.Redirect">
            <summary>
            Redirect message type.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.EchoReq">
            <summary>
            Echo request query.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.TimeExceeded">
            <summary>
            TTL exceeded error.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.ParameterProblem">
            <summary>
            Parameter Problem.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.TimestampMsg">
            <summary>
            Timestamp message.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.TimestampReply">
            <summary>
            Timestamp reply.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.InfoReq">
            <summary>
            Information request.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.InfoReply">
            <summary>
            Information reply.
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.DefaultTtl">
            <summary>
            Default TTL (time to live).
            </summary>
        </member>
        <member name="F:Tethys.Net.IcmpConstants.MaxTtl">
            <summary>
            Max TTL (time to live).
            </summary>
        </member>
        <member name="T:Tethys.Net.IcmpEchoRequest">
            <summary>
            ICMP Echo Request, size is 8 + 32 = 40 bytes.
            (PacketSize as defined) = 32 bytes.
            </summary>
        </member>
        <member name="P:Tethys.Net.IcmpEchoRequest.Header">
            <summary>
            Gets or sets the ICMP header.
            </summary>
        </member>
        <member name="P:Tethys.Net.IcmpEchoRequest.Data">
            <summary>
            Gets or sets the ICMP data.
            </summary>
        </member>
        <member name="T:Tethys.Net.IcmpHeader">
            <summary>
            ICMP header, size is 8 bytes.
            </summary>
        </member>
        <member name="P:Tethys.Net.IcmpHeader.HeaderType">
            <summary>
            Gets or sets the header type.
            </summary>
        </member>
        <member name="P:Tethys.Net.IcmpHeader.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:Tethys.Net.IcmpHeader.Checksum">
            <summary>
            Gets or sets the checksum.
            </summary>
        </member>
        <member name="P:Tethys.Net.IcmpHeader.Id">
            <summary>
            Gets or sets the identification.
            </summary>
        </member>
        <member name="P:Tethys.Net.IcmpHeader.Seq">
            <summary>
            Gets or sets the sequence.
            </summary>
        </member>
        <member name="T:Tethys.Net.TcpIp">
            <summary>
            The class TcpIp implements support functions for
            TCP/IP network access.
            </summary>
        </member>
        <member name="F:Tethys.Net.TcpIp.HeaderSize">
            <summary>
            Default header size.
            </summary>
        </member>
        <member name="F:Tethys.Net.TcpIp.DataPacketSize">
            <summary>
            Default data size.
            </summary>
        </member>
        <member name="F:Tethys.Net.TcpIp.PacketSize">
            <summary>
            Default packet size.
            </summary>
        </member>
        <member name="M:Tethys.Net.TcpIp.CreatePacket(Tethys.Net.IcmpEchoRequest)">
            <summary>
            Create byte array from IcmpEchoRequest structure.
            </summary>
            <param name="req">The request.</param>
            <returns>The packet.</returns>
        </member>
        <member name="T:Tethys.Win32.PeekMessageFlags">
            <summary>
            Peek Message Flags.
            </summary>
        </member>
        <member name="F:Tethys.Win32.PeekMessageFlags.PM_NOREMOVE">
            <summary>
            No remove flag.
            </summary>
        </member>
        <member name="F:Tethys.Win32.PeekMessageFlags.PM_REMOVE">
            <summary>
            Remove flag,
            </summary>
        </member>
        <member name="F:Tethys.Win32.PeekMessageFlags.PM_NOYIELD">
            <summary>
            No yield flag
            </summary>
        </member>
        <member name="T:Tethys.Win32.Msg">
            <summary>
            Windows Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.WindowStyles">
            <summary>
            Window Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.WindowExStyles">
            <summary>
            Window Extended Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ShowWindowStyles">
            <summary>
            ShowWindow Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.SetWindowPosZOrder">
            <summary>
            SetWindowPos Z Order.
            </summary>
        </member>
        <member name="T:Tethys.Win32.SetWindowPosFlags">
            <summary>
            SetWindowPosFlags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.VirtualKeys">
            <summary>
            Virtual Keys.
            </summary>
        </member>
        <member name="F:Tethys.Win32.VirtualKeys.VK_CTRLC">
            <summary>
            Ctrl+C character code.
            </summary>
        </member>
        <member name="T:Tethys.Win32.PatBltTypes">
            <summary>
            PatBlt Types.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ClipboardFormats">
            <summary>
            Clipboard Formats.
            </summary>
        </member>
        <member name="T:Tethys.Win32.CommonControlInitFlags">
            <summary>
            Common Controls Initialization flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.CommonControlStyles">
            <summary>
            Common Controls Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolBarStyles">
            <summary>
            ToolBar Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolBarExStyles">
            <summary>
            ToolBar Ex Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolBarMessages">
            <summary>
            ToolBar Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolBarNotifications">
            <summary>
            ToolBar Notifications.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ReflectedMessages">
            <summary>
            Reflected Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.NotificationMessages">
            <summary>
            Notification Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolTipFlags">
            <summary>
            ToolTip Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.CustomDrawReturnFlags">
            <summary>
            Custom Draw Return Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.CustomDrawItemStateFlags">
            <summary>
            Custom Draw Item State Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.CustomDrawDrawStateFlags">
            <summary>
            Custom Draw Draw State Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolBarButtonInfoFlags">
            <summary>
            Toolbar button info flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolBarButtonStyles">
            <summary>
            Toolbar button styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ToolBarButtonStates">
            <summary>
            Toolbar button state.
            </summary>
        </member>
        <member name="T:Tethys.Win32.WindowsHookCodes">
            <summary>
            Windows Hook Codes.
            </summary>
        </member>
        <member name="T:Tethys.Win32.MouseHookFilters">
            <summary>
            Mouse Hook Filters.
            </summary>
        </member>
        <member name="T:Tethys.Win32.DrawTextFormatFlags">
            <summary>
            Draw Text format flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.RebarStyles">
            <summary>
            Rebar Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.RebarNotifications">
            <summary>
            Rebar Notifications.
            </summary>
        </member>
        <member name="T:Tethys.Win32.RebarMessages">
            <summary>
            Rebar Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.RebarInfoMask">
            <summary>
            Rebar Info Mask.
            </summary>
        </member>
        <member name="T:Tethys.Win32.RebarStylesEx">
            <summary>
            Rebar Styles.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ObjectTypes">
            <summary>
            Object types.
            </summary>
        </member>
        <member name="T:Tethys.Win32.MenuCharReturnValues">
            <summary>
            WM_MENUCHAR return values.
            </summary>
        </member>
        <member name="T:Tethys.Win32.BackgroundMode">
            <summary>
            Background Mode.
            </summary>
        </member>
        <member name="F:Tethys.Win32.BackgroundMode.TRANSPARENT">
            <summary>
            Trabsparent Background Mode.
            </summary>
        </member>
        <member name="F:Tethys.Win32.BackgroundMode.OPAQUE">
            <summary>
            Opaque Background Mode.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ListViewMessages">
            <summary>
            ListView Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.HeaderControlMessages">
            <summary>
            Header Control Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.HeaderControlNotifications">
            <summary>
            Header Control Notifications.
            </summary>
        </member>
        <member name="T:Tethys.Win32.HeaderControlHitTestFlags">
            <summary>
            Header Control HitTest Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.SubItemPortion">
            <summary>
            List View sub item portion.
            </summary>
        </member>
        <member name="T:Tethys.Win32.CursorType">
            <summary>
            Cursor Type.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TrackerEventFlags">
            <summary>
            Tracker Event Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.MouseActivateFlags">
            <summary>
            Mouse Activate Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.DialogCodes">
            <summary>
            Dialog Codes.
            </summary>
        </member>
        <member name="T:Tethys.Win32.UpdateLayeredWindowsFlags">
            <summary>
            Update Layered Windows Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.AlphaFlags">
            <summary>
            The Alpha Flags.
            </summary>
        </member>
        <member name="F:Tethys.Win32.AlphaFlags.AC_SRC_OVER">
            <summary>
            The Over value.
            </summary>
        </member>
        <member name="F:Tethys.Win32.AlphaFlags.AC_SRC_ALPHA">
            <summary>
            The Alpha value.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ComboBoxMessages">
            <summary>
            ComboBox messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.SetWindowLongOffsets">
            <summary>
            SetWindowLong indexes.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TreeViewMessages">
            <summary>
            TreeView Messages.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TreeViewItemFlags">
            <summary>
            TreeViewItem Flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.ListViewItemFlags">
            <summary>
            ListViewItem flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.HeaderItemFlags">
            <summary>
            The HeaderItemFlags flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.GetDCExFlags">
            <summary>
            The GetDCExFlags flags.
            </summary>
        </member>
        <member name="T:Tethys.Win32.SLGP_FLAGS">
            <summary>
            The SLGP_FLAGS flags.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLGP_FLAGS.SLGP_SHORTPATH">
            <summary>
            Retrieves the standard short (8.3 format) file name
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLGP_FLAGS.SLGP_UNCPRIORITY">
            <summary>
            Retrieves the Universal Naming Convention (UNC) path
            name of the file
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLGP_FLAGS.SLGP_RAWPATH">
            <summary>Retrieves the raw path name. A raw path is
            something that might not exist and may include
            environment variables that need to be expanded
            </summary>
        </member>
        <member name="T:Tethys.Win32.SLR_FLAGS">
            <summary>
            The SLR_FLAGS flags.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_NO_UI">
            <summary>
            Do not display a dialog box if the link cannot be
            resolved. When SLR_NO_UI is set, the high-order word
            of fFlags can be set to a time-out value that specifies
            the maximum amount of time to be spent resolving the link.
            The function returns if the link cannot be resolved within
            the time-out duration. If the high-order word is set
            to zero, the time-out duration will be set to the default
            value of 3,000 milliseconds (3 seconds). To specify a value,
            set the high word of fFlags to the desired time-out
            duration, in milliseconds.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_ANY_MATCH">
            <summary>Obsolete and no longer used</summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_UPDATE">
            <summary>
            If the link object has changed, update its path
            and list of identifiers.
            If SLR_UPDATE is set, you do not need to call
            IPersistFile::IsDirty to determine
            whether or not the link object has changed.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_NOUPDATE">
            <summary>
            Do not update the link information
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_NOSEARCH">
            <summary>
            Do not execute the search heuristics
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_NOTRACK">
            <summary>
            Do not use distributed link tracking
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_NOLINKINFO">
            <summary>
            Disable distributed link tracking. By default, distributed
            link tracking tracks removable media across multiple
            devices based on the volume name. It also uses the
            Universal Naming Convention (UNC) path to track remote
            file systems whose drive letter has changed. Setting
            SLR_NOLINKINFO disables both types of tracking.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SLR_FLAGS.SLR_INVOKE_MSI">
            <summary>
            Call the Microsoft Windows Installer
            </summary>
        </member>
        <member name="T:Tethys.Win32.IShellLinkW">
            <summary>
            The IShellLink interface allows Shell links to be created,
            modified, and resolved.
            </summary>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,Tethys.Win32.WIN32_FIND_DATAW@,Tethys.Win32.SLGP_FLAGS)">
            <summary>
            Retrieves the path and file name of a Shell link object.
            </summary>
            <param name="pszFile">The PSZ file.</param>
            <param name="cchMaxPath">The CCH max path.</param>
            <param name="pfd">The PFD.</param>
            <param name="fFlags">The f flags.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetIDList(System.IntPtr@)">
            <summary>
            Retrieves the list of item identifiers for a Shell link object.
            </summary>
            <param name="ppidl">Point to the ID list.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetIDList(System.IntPtr)">
            <summary>Sets the pointer to an item identifier list .
            (PIDL) for a Shell link object.
            </summary>
            <param name="pidl">Pointer to the ID.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the description string for a Shell link object.
            </summary>
            <param name="pszName">The name.</param>
            <param name="cchMaxName">Maximum characters of teh name.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetDescription(System.String)">
            <summary>
            Sets the description for a Shell link object. The description
            can be any application-defined string.
            </summary>
            <param name="pszName">The name.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the name of the working directory for a Shell link
            object.
            </summary>
            <param name="pszDir">The working directory.</param>
            <param name="cchMaxPath">Maximum characters of the working directory.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetWorkingDirectory(System.String)">
            <summary>
            Sets the name of the working directory for a Shell link object.
            </summary>
            <param name="pszDir">The working directory.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the command-line arguments associated with a Shell link object.
            </summary>
            <param name="pszArgs">The command-line arguments.</param>
            <param name="cchMaxPath">Maximum length of the command-line arguments.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetArguments(System.String)">
            <summary>
            Sets the command-line arguments for a Shell link object.
            </summary>
            <param name="pszArgs">The command-line arguments.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetHotkey(System.Int16@)">
            <summary>
            Retrieves the hot key for a Shell link object.
            </summary>
            <param name="pwHotkey">The hot key.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetHotkey(System.Int16)">
            <summary>
            Sets a hot key for a Shell link object.
            </summary>
            <param name="wHotkey">The hot key.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetShowCmd(System.Int32@)">
            <summary>
            Retrieves the show command for a Shell link object.
            </summary>
            <param name="piShowCmd">Id of the show command.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetShowCmd(System.Int32)">
            <summary>
            Sets the show command for a Shell link object.
            The show command sets the initial show state of the window.
            </summary>
            <param name="iShowCmd">The show command.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves the location (path and index) of the icon
            for a Shell link object.
            </summary>
            <param name="pszIconPath">The path to the icon.</param>
            <param name="cchIconPath">Maximum characters of the path.</param>
            <param name="piIcon">Index of the icon.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetIconLocation(System.String,System.Int32)">
            <summary>
            Sets the location (path and index) of the icon for a Shell link object.
            </summary>
            <param name="pszIconPath">Path to the icon.</param>
            <param name="iIcon">Icon index.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetRelativePath(System.String,System.Int32)">
            <summary>
            Sets the relative path to the Shell link object.
            </summary>
            <param name="pszPathRel">The path.</param>
            <param name="dwReserved">Reserved.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.Resolve(System.IntPtr,Tethys.Win32.SLR_FLAGS)">
            <summary>
            Attempts to find the target of a Shell link, even if it has been
            moved or renamed.
            </summary>
            <param name="hwnd">The handle.</param>
            <param name="fFlags">The flags.</param>
        </member>
        <member name="M:Tethys.Win32.IShellLinkW.SetPath(System.String)">
            <summary>
            Sets the path and file name of a Shell link object.
            </summary>
            <param name="pszFile">The filename.</param>
        </member>
        <member name="T:Tethys.Win32.SIZE">
            <summary>
            The SIZE structure specifies the width and height of a rectangle.
            </summary>
        </member>
        <member name="T:Tethys.Win32.RECT">
            <summary>
            The RECT structure defines the coordinates of the upper-left and
            lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="T:Tethys.Win32.INITCOMMONCONTROLSEX">
            <summary>
            Carries information used to load common control classes from the
            dynamic-link library (DLL). This structure is used with the
            InitCommonControlsEx function.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TBBUTTON">
            <summary>
            Contains information about a button in a toolbar.
            </summary>
        </member>
        <member name="T:Tethys.Win32.POINT">
            <summary>
            Win32 API POINT structure.
            </summary>
        </member>
        <member name="F:Tethys.Win32.POINT.x">
            <summary>
            X coordinate of the point.
            </summary>
        </member>
        <member name="F:Tethys.Win32.POINT.y">
            <summary>
            Y coordinate of the point.
            </summary>
        </member>
        <member name="M:Tethys.Win32.POINT.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.Win32.POINT"/> class.
            </summary>
        </member>
        <member name="M:Tethys.Win32.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tethys.Win32.POINT"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="T:Tethys.Win32.NMHDR">
            <summary>
            Contains information about a notification message.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TOOLTIPTEXTA">
            <summary>
            TOOLTIPTEXTA.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TOOLTIPTEXT">
            <summary>
            TOOLTIPTEXT.
            </summary>
        </member>
        <member name="T:Tethys.Win32.NMCUSTOMDRAW">
            <summary>
            Contains information specific to an NM_CUSTOMDRAW notification message.
            </summary>
        </member>
        <member name="T:Tethys.Win32.NMTBCUSTOMDRAW">
            <summary>
            Contains information specific to an NM_CUSTOMDRAW notification
            message sent by a toolbar control.
            </summary>
        </member>
        <member name="T:Tethys.Win32.NMLVCUSTOMDRAW">
            <summary>
            Contains information specific to an NM_CUSTOMDRAW (list view)
            notification message sent by a list-view control.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TBBUTTONINFO">
            <summary>
            Contains or receives information for a specific button in a toolbar.
            </summary>
        </member>
        <member name="T:Tethys.Win32.REBARBANDINFO">
            <summary>
            Contains information that defines a band in a rebar control.
            </summary>
        </member>
        <member name="T:Tethys.Win32.MOUSEHOOKSTRUCT">
            <summary>
            The MOUSEHOOKSTRUCT structure contains information about a mouse event
            passed to a WH_MOUSE hook procedure, MouseProc.
            </summary>
        </member>
        <member name="T:Tethys.Win32.NMTOOLBAR">
            <summary>
            Contains information used to process toolbar notification messages.
            This structure supersedes the TBNOTIFY structure.
            </summary>
        </member>
        <member name="T:Tethys.Win32.NMREBARCHEVRON">
            <summary>
            Contains information used in handling the RBN_CHEVRONPUSHED.
            notification message.
            </summary>
        </member>
        <member name="T:Tethys.Win32.BITMAP">
            <summary>
            The Bitmap struct.
            </summary>
        </member>
        <member name="T:Tethys.Win32.BITMAPINFO_FLAT">
            <summary>
            The BITMAPINFO_FLAT struct.
            </summary>
        </member>
        <member name="T:Tethys.Win32.RGBQUAD">
            <summary>
            The RGBQUAD struct.
            </summary>
        </member>
        <member name="T:Tethys.Win32.BITMAPINFOHEADER">
            <summary>
            The BITMAPINFOHEADER struct.
            </summary>
        </member>
        <member name="T:Tethys.Win32.LVITEM">
            <summary>
            Specifies or receives the attributes of a list-view item.
            This structure has been updated to support a new mask value (LVIF_INDENT)
            that enables item indenting. This structure supersedes the LV_ITEM
            structure.
            </summary>
        </member>
        <member name="T:Tethys.Win32.HDITEM">
            <summary>
            Contains information about an item in a header control.
            This structure supersedes the HD_ITEM structure.
            </summary>
        </member>
        <member name="T:Tethys.Win32.SHFILEOPSTRUCT">
            <summary>
            Contains information that the SHFileOperation function uses
            to perform file operations.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.hWnd">
            <summary>
            Window handle to the dialog box to display information about the status of the file operation.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.wFunc">
            <summary>
            Value that indicates which operation to perform. This member can be one of the following values.
            * FO_COPY - Copy the files specified in the pFrom member to the
            location specified in the pTo member.
            * FO_DELETE - Delete the files specified in pFrom.
            * FO_MOVE - Move the files specified in pFrom to the location
            specified in pTo.
            * FO_RENAME - Rename the file specified in pFrom. You cannot use this
            flag to rename multiple files with a single function call.
            Use FO_MOVE instead.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.pFrom">
            <summary>
            Address of a buffer to specify one or more source file names. These
            names must be fully qualified paths. Standard Microsoft MS-DOS wild
            cards, such as "*", are permitted in the file-name position.
            Although this member is declared as a null-terminated string, it
            is used as a buffer to hold multiple file names. Each file name
            must be terminated by a single NULL character. An additional NULL
            character must be appended to the end of the final name to indicate
            the end of pFrom.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.pTo">
            <summary>
            Address of a buffer to contain the name of the destination file or directory.
            This parameter must be set to NULL if it is not used. Like pFrom, the pTo member is also
            a double-null terminated string and is handled in much the same way. However, pTo must meet
            the following specifications.
            <list type="">
            <item>Wildcard characters are not supported.</item>
            <item>Copy and Move operations can specify destination directories that
            do not exist and the system will attempt to create them. The system
            normally displays a dialog box to ask the user if they want to
            create the new directory. To suppress this dialog box and have the
            directories created silently, set the FOF_NOCONFIRMMKDIR flag
            in fFlags.</item>
            <item>For Copy and Move operations, the buffer can contain multiple
            destination file names if the fFlags member specifies
            FOF_MULTIDESTFILES.</item>
            <item>Pack multiple names into the string in the same way as for pFrom.</item>
            <item>Use only fully-qualified paths. Using relative paths will have
            unpredictable results.</item>
            </list>
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.fFlags">
            <summary>
            Flags that control the file operation.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.fAnyOperationsAborted">
            <summary>
            Value that receives TRUE if the user aborted any file operations
            before they were completed, or FALSE otherwise.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.hNameMappings">
            <summary>
            A handle to a name mapping object containing the old and new names of
            the renamed files. This member is used only if the fFlags member
            includes the FOF_WANTMAPPINGHANDLE flag. See Remarks for more
            details.
            </summary>
        </member>
        <member name="F:Tethys.Win32.SHFILEOPSTRUCT.lpszProgressTitle">
            <summary>
            Address of a string to use as the title of a progress dialog box.
            This member is used only if fFlags includes the FOF_SIMPLEPROGRESS
            flag.
            </summary>
        </member>
        <member name="T:Tethys.Win32.LOGFONT">
            <summary>
            Windows API Logical Font structure to represent information
            about a font.
            </summary>
        </member>
        <member name="F:Tethys.Win32.LOGFONT.lfHeight">
            <summary>
            Height of the font.
            </summary>
        </member>
        <member name="T:Tethys.Win32.TEXTMETRIC">
            <summary>
            Summary for TEXTMETRIC.
            </summary>
        </member>
        <member name="T:Tethys.Win32.FontFamilyTypes">
            <summary>
            FontFamilyTypes.
            </summary>
        </member>
        <member name="F:Tethys.Win32.FontFamilyTypes.FF_DONTCARE">
            <summary>
            Don't care or don't know.
            </summary>
        </member>
        <member name="F:Tethys.Win32.FontFamilyTypes.FF_ROMAN">
            <summary>
            Variable stroke width, serifed.
            Times Roman, Century Schoolbook, etc.
            </summary>
        </member>
        <member name="F:Tethys.Win32.FontFamilyTypes.FF_SWISS">
            <summary>
            Variable stroke width, sans-serifed.
            Helvetica, Swiss, etc.
            </summary>
        </member>
        <member name="F:Tethys.Win32.FontFamilyTypes.FF_MODERN">
            <summary>
            Constant stroke width, serifed or sans-serifed.
            Pica, Elite, Courier, etc.
            </summary>
        </member>
        <member name="F:Tethys.Win32.FontFamilyTypes.FF_SCRIPT">
            <summary>
            Cursive, etc.
            </summary>
        </member>
        <member name="F:Tethys.Win32.FontFamilyTypes.FF_DECORATIVE">
            <summary>
            Old English, etc.
            </summary>
        </member>
        <member name="T:Tethys.Win32.WIN32_FIND_DATAW">
            <summary>
            Contains information about the file that is found by the FindFirstFile,
            FindFirstFileEx, or FindNextFile function.
            </summary>
        </member>
        <member name="T:Tethys.Win32.Win32Api">
            <summary>
            The class Win32 Api encapsulates native Win32 constants and functions.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.SB_VERT">
            <summary>
            Scroll bar constant.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.EM_SETSCROLLPOS">
            <summary>
            Win32 API message to set scroll bar position.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_MULTIDESTFILES">
            <summary>
            The pTo member specifies multiple destination files (one for each source file) rather than one directory where all source files are to be deposited.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_CONFIRMMOUSE">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_SILENT">
            <summary>
            Do not display a progress dialog box.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_RENAMEONCOLLISION">
            <summary>
            Give the file being operated on a new name in a move, copy, or rename operation if a file with the target name already exists.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_NOCONFIRMATION">
            <summary>
            Respond with "Yes to All" for any dialog box that is displayed.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_WANTMAPPINGHANDLE">
            <summary>
            If FOF_RENAMEONCOLLISION is specified and any files were renamed, assign a name mapping object containing their old and new names to the hNameMappings member.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_ALLOWUNDO">
            <summary>
            Preserve undo information, if possible. Operations can be undone only from the same process that performed the original operation. If pFrom does not contain fully qualified path and file names, this flag is ignored.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_FILESONLY">
            <summary>
            Perform the operation on files only if a wildcard file name (*.*) is specified.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_SIMPLEPROGRESS">
            <summary>
            Display a progress dialog box but do not show the file names.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_NOCONFIRMMKDIR">
            <summary>
            Do not confirm the creation of a new directory if the operation requires one to be created.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_NOERRORUI">
            <summary>
            Do not display a user interface if an error occurs.
            </summary>
        </member>
        <member name="F:Tethys.Win32.Win32Api.FOF_NOCOPYSECURITYATTRIBS">
            <summary>
            Version 4.71. Do not copy the security attributes of the file.
            </summary>
        </member>
        <member name="T:Tethys.Win32.Win32Api.HookProc">
            <summary>
            Hook callback delegate.
            </summary>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:Tethys.Win32.Win32Api.TimerProc">
            <summary>
            Time callback delegate.
            </summary>
            <param name="hWnd"></param>
            <param name="uMsg"></param>
            <param name="nIDEvent"></param>
            <param name="dwTime"></param>
        </member>
        <member name="M:Tethys.Win32.Win32Api.SendMessage(System.IntPtr,System.Int32,System.Int32,Tethys.Win32.POINT)">
            <summary>
            Win32 API SendMessage function.
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Tethys.Win32.Win32Api.MessageBeep(System.Int32)">
            <summary>
            The MessageBeep function plays a waveform sound. The waveform
            sound for each sound type is identified by an entry in the
            registry.
            </summary>
            <param name="type">
            Sound type, as identified by an entry in the registry.
            This parameter can be one of the following values.<br/>
            <table>
            <tr>
            <td>Value</td><td>Sound</td>
            </tr>
            <tr>
            <td>-1</td>
            <td>Simple beep. If the sound card is not available, the sound is generated using the speaker.</td>
            </tr>
            <tr>
            <td>MB_ICONASTERISK</td>
            <td>SystemAsterisk</td>
            </tr>
            <tr>
            <td>MB_ICONEXCLAMATION</td>
            <td>SystemExclamation</td>
            </tr>
            <tr>
            <td>MB_ICONHAND</td>
            <td>SystemHand</td>
            </tr>
            <tr>
            <td>MB_ICONQUESTION</td>
            <td>SystemQuestion</td>
            </tr>
            <tr>
            <td>MB_OK</td>
            <td>SystemDefault</td>
            </tr>
            </table>
            </param>
        </member>
        <member name="M:Tethys.Win32.Win32Api.MessageBox(System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            The MessageBox function creates, displays, and operates a message box.
            The message box contains an application-defined message and title,
            plus any combination of predefined icons and push buttons.
            <br/>
            See SKD Documentation for more information.
            </summary>
            <param name="hWndParent">handle to owner window</param>
            <param name="text">text in message box</param>
            <param name="caption">message box title</param>
            <param name="type">message box style</param>
            <returns></returns>
        </member>
        <member name="M:Tethys.Win32.Win32Api.CreateWindowEx(System.UInt32,System.String,System.String,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The CreateWindowEx function creates an overlapped, pop-up, or child
            window with an extended window style; otherwise, this function is
            identical to the CreateWindow function. For more information about
            creating a window and for full descriptions of the other parameters
            see the SDk documentation.
            </summary>
            <param name="dwExStyle">extended window style</param>
            <param name="lpClassName">registered class name</param>
            <param name="lpWindowName">window name</param>
            <param name="dwStyle">window style</param>
            <param name="x">horizontal position of window</param>
            <param name="y">vertical position of window</param>
            <param name="nWidth">window width</param>
            <param name="nHeight">window height</param>
            <param name="hWndParent">handle to parent or owner window</param>
            <param name="hMenu">menu handle or child identifier</param>
            <param name="hInstance">handle to application instance</param>
            <param name="lpParam">window-creation data</param>
            <returns></returns>
        </member>
        <member name="M:Tethys.Win32.Win32Api.GetScrollRange(System.IntPtr,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the sroll range of the given window.
            </summary>
            <param name="hWnd"></param>
            <param name="nBar"></param>
            <param name="lpMinPos"></param>
            <param name="lpMaxPos"></param>
            <returns></returns>
        </member>
        <member name="M:Tethys.Win32.Win32Api.SHFileOperation(Tethys.Win32.SHFILEOPSTRUCT@)">
            <summary>
            Copies, moves, renames, or deletes a file system object.
            </summary>
            <param name="lpFileOperationData">
            [in] Pointer to an SHFILEOPSTRUCT structure that contains information
            this function needs to carry out the specified operation. This
            parameter must contain a valid value that is not NULL. You are
            responsibile for validating the value. If you do not validate it,
            you will experience unexpected results.
            </param>
            <returns>
            Returns zero if successful, or nonzero otherwise.
            </returns>
        </member>
    </members>
</doc>
